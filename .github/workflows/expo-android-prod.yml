name: Expo Android Production (SemVer)

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'  # Only on version tags like v1.0.0, v2.3.1

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: current

      - name: Set up Expo environment
        uses: expo/expo-github-action@v8
        with:
          token: ${{ secrets.EXPO_TOKEN }}
          eas-version: latest
          eas-cache: true
          expo-cache: true
          packager: npm
          patch-watchers: true

      - name: Install dependencies
        run: npm install

      - name: Run EAS build and wait
        id: eas-build
        run: |
          eas build --platform android --profile production --non-interactive --wait --json > result.json

          build_url=$(jq -r '.[0].artifacts.buildUrl' result.json)

          if [ -z "$build_url" ] || [ "$build_url" = "null" ]; then
            echo "❌ Build URL not found"
            exit 1
          fi

          echo "✅ Build URL: $build_url"
          echo "url=$build_url" >> $GITHUB_OUTPUT
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Download APK artifact and rename
        id: download
        run: |
          filename="cosmos-${GITHUB_REF_NAME}.apk"
          echo "Downloading from: ${{ steps.eas-build.outputs.url }}"
          curl -L "${{ steps.eas-build.outputs.url }}" -o "$filename"
          echo "apk=$filename" >> $GITHUB_OUTPUT

      - name: Get commit message and SHA
        id: commit
        run: |
          message=$(git log -1 --pretty=%B)
          sha=$(git rev-parse HEAD)
          url="https://github.com/${{ github.repository }}/commit/$sha"
      
          {
            echo "message<<EOF"
            echo "$message"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
      
          echo "sha=$sha" >> "$GITHUB_OUTPUT"
          echo "url=$url" >> "$GITHUB_OUTPUT"

      - name: Create GitHub release with versioned APK
        run: |
          notes="- [${{ steps.commit.outputs.message }}](${{ steps.commit.outputs.url }})"
          gh release create ${GITHUB_REF_NAME} \
            --title "${GITHUB_REF_NAME}" \
            --notes "$notes" \
            "${{ steps.download.outputs.apk }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
